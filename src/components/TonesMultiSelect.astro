---
interface Props {
  tones: string[];
}

const { tones } = Astro.props;
---

<div class="relative">
  <label class="block text-sm font-medium text-gray-700 mb-3">Tones</label>
  
  <!-- Input container with tags -->
  <div 
    id="tones-input-container"
    class="min-h-[3rem] w-full px-3 py-2 border-2 border-gray-300 rounded-xl focus-within:border-purple-500 transition-colors bg-white cursor-text flex flex-wrap items-center gap-2"
  >
    <!-- Tags container -->
    <div id="selected-tones-tags" class="flex flex-wrap gap-2">
      <!-- Tags will be inserted here -->
    </div>
    
    <!-- Placeholder/Input area -->
    <div class="flex-1 min-w-[120px]">
      <input
        type="text"
        id="tones-search-input"
        placeholder="Select tones..."
        class="w-full border-none outline-none bg-transparent text-sm"
        readonly
      />
    </div>
    
    <!-- Dropdown arrow -->
    <svg id="tones-dropdown-arrow" class="w-5 h-5 text-gray-400 transition-transform duration-200" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
    </svg>
  </div>
  
  <!-- Dropdown options -->
  <div 
    id="tones-dropdown-options" 
    class="hidden absolute z-20 w-full mt-1 bg-white border border-gray-300 rounded-xl shadow-lg max-h-48 overflow-y-auto"
  >
    {tones.map(tone => (
      <label class="flex items-center space-x-3 cursor-pointer hover:bg-gray-50 p-3 transition-colors border-b border-gray-100 last:border-b-0">
        <input
          type="checkbox"
          value={tone}
          class="tone-checkbox w-4 h-4 text-purple-600 border-gray-300 rounded focus:ring-purple-500"
        />
        <span class="text-sm text-gray-700 flex-1">
          {tone.charAt(0).toUpperCase() + tone.slice(1)}
        </span>
      </label>
    ))}
  </div>
</div>

<script>
  declare global {
    interface Window {
      clearTonesFilter: () => void;
      getSelectedTones: () => string[];
    }
  }

  // Este script se ejecutará cuando el componente se monte
  document.addEventListener('DOMContentLoaded', function() {
    const container = document.getElementById('tones-input-container');
    const searchInput = document.getElementById('tones-search-input') as HTMLInputElement;
    const dropdown = document.getElementById('tones-dropdown-options');
    const arrow = document.getElementById('tones-dropdown-arrow');
    const tagsContainer = document.getElementById('selected-tones-tags');
    const checkboxes = document.querySelectorAll('.tone-checkbox') as NodeListOf<HTMLInputElement>;

    if (!container || !searchInput || !dropdown || !arrow || !tagsContainer) return;

    // Función para crear un tag
    function createTag(tone: string) {
      const tag = document.createElement('span');
      tag.className = 'inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-purple-100 text-purple-800 border border-purple-200 animate-in fade-in duration-200';
      tag.dataset.tone = tone;
      tag.innerHTML = `
        ${tone.charAt(0).toUpperCase() + tone.slice(1)}
        <button type="button" class="ml-2 text-purple-600 hover:text-purple-800 transition-colors" data-remove-tone="${tone}">
          <svg class="w-3 h-3" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
          </svg>
        </button>
      `;
      return tag;
    }

    // Función para actualizar tags y placeholder
    function updateTags() {
      const selectedTones = Array.from(checkboxes)
        .filter(checkbox => checkbox.checked)
        .map(checkbox => checkbox.value);

      tagsContainer.innerHTML = '';
      
      if (selectedTones.length === 0) {
        searchInput.placeholder = 'Select tones...';
      } else {
        searchInput.placeholder = '';
        selectedTones.forEach(tone => {
          tagsContainer.appendChild(createTag(tone));
        });
      }

      // Trigger custom event for filtering
      window.dispatchEvent(new CustomEvent('tonesChanged', { 
        detail: { selectedTones } 
      }));
    }

    // Toggle dropdown
    function toggleDropdown() {
      const isHidden = dropdown.classList.contains('hidden');
      dropdown.classList.toggle('hidden');
      arrow.style.transform = isHidden ? 'rotate(180deg)' : 'rotate(0deg)';
    }

    // Event listeners
    container.addEventListener('click', toggleDropdown);

    // Cerrar dropdown al hacer clic fuera
    document.addEventListener('click', function(event) {
      const target = event.target as Node;
      if (!container.contains(target) && !dropdown.contains(target)) {
        dropdown.classList.add('hidden');
        arrow.style.transform = 'rotate(0deg)';
      }
    });

    // Manejar checkboxes
    checkboxes.forEach(checkbox => {
      checkbox.addEventListener('change', updateTags);
    });

    // Manejar remoción de tags
    tagsContainer.addEventListener('click', function(event) {
      const target = event.target as HTMLElement;
      const removeBtn = target.closest('[data-remove-tone]') as HTMLElement;
      if (removeBtn) {
        event.stopPropagation();
        const tone = removeBtn.dataset.removeTone;
        const checkbox = Array.from(checkboxes).find(cb => cb.value === tone);
        if (checkbox) {
          checkbox.checked = false;
          updateTags();
        }
      }
    });

    // Función global para limpiar
    window.clearTonesFilter = function() {
      checkboxes.forEach(checkbox => {
        checkbox.checked = false;
      });
      updateTags();
    };

    // Función global para obtener tonos seleccionados
    window.getSelectedTones = function() {
      return Array.from(checkboxes)
        .filter(checkbox => checkbox.checked)
        .map(checkbox => checkbox.value);
    };

    // Inicializar
    updateTags();
  });
</script>

<style>
  @keyframes fade-in {
    from { opacity: 0; transform: scale(0.95); }
    to { opacity: 1; transform: scale(1); }
  }
  
  .animate-in {
    animation: fade-in 0.2s ease-out;
  }
</style> 